이번 과제는 iter 라는 템플릿 함수를 정의함
첫번째 매개변수에는 배열의 주소 
두번째 매개변수에는 배열의 길이
세번째에는 배열의 각 요소에서 불러질 함수 이므로 함수포인터를 이용해야함


template<typename T, typename U>
void	iter(T	*arr, size_t len, U (*f)(T &))
{
	if (arr == NULL || f == NULL)
		return ;
	for (size_t i = 0; i < len; i++)
		f(arr[i]);
}

template<typename T, typename U>
void	iter(const T *arr, size_t len, U (*f)(const T &))
{
	if (arr == NULL || f == NULL)
		return ;
	for (size_t i = 0; i < len; i++)
		f(arr[i]);
}


이렇게 2개의 함수 템플릿을 구현했는데 
주요한 차이점은 3번째 인자에 들어갈 함수의 매개변수가
const T참조 타입인 경우에도 iter가 실행될 수 있도록 수정함.

이는 const correctness 즉, C++ 프로그래밍에서 데이터와 함수의 상수성(불변성)을
올바르게 관리하고 지키는 개념(코드의 안정성, 가독성, 유지보수성을 향상시키는데 중요한 역할)에
따라 구현한 것으로 함수내에서 데이터가 수정되지 않는 다는 것을 컴파일러에게 알려줌.

또한, const T & 와 같이 레퍼런스에 const가 붙은 경우에는

반드시 타입을 맞춰서 적어줘야함 . 



무슨말이냐.. 


만약 아래와 같이 print 함수의 매개변수의 타입이  const int& 
라면

iter 의 3번째 함수포인터의 인자 또한 const int& 이어야 함.
int & 가 될 수 없음. 

반면 iter의 첫번째 매개변수는 const int 도 가능하고 int 도 가능하다 
이유는 레퍼런스가 아니라서.


int print2(const int & e)
{
	std::cout << e << std::endl;
	return 1;
}

// void iter( ... , int(*f)(int&))  는 불가능 
//void iter(const int *arr, ... )  도 가능

void iter(int *arr, size_t len, int(*f)(const int&))
{
	if (arr == NULL || f == NULL)
		return ;
	for (size_t i = 0; i < len; i++)
		f(arr[i]);
}

int main()
{
	int tab[] = {0, 1, 2, 3, 4};

	iter(tab, 5, print2);
}
